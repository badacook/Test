Generating a new SSH key  Open Git Bash.
1、Enter ls -al ~/.ssh to see if existing SSH keys are present:
$ ls -al ~/.ssh
2、Generating public/private rsa key pair
$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
3、Start the ssh-agent in the background.
eval "$(ssh-agent -s)"
4、Copy the SSH key to your clipboard And Adding the SSH key to your GitHub account
$ clip < ~/.ssh/id_rsa.pub
or $ cat ~/.ssh/id_rsa.pub
5、Testing your SSH connection
$ ssh -T git@github.com
Hi badacook! You've successfully authenticated, but GITHUB.COM does not provide shell access


Generating a new GPG key
Download and install the GPG command line tools for your operating system. We generally recommend installing the latest version for your operating system.
1、Open Git Bash.If you are on version 2.1.17 or greater, paste the text below to generate a GPG key pair.
$ gpg --full-generate-key
If you are not on version 2.1.17 or greater, the gpg --full-generate-key command doesn't work. Paste the text below and skip to step 6.
$ gpg --default-new-key-algo rsa4096 --gen-key
At the prompt, specify the kind of key you want, or press Enter to accept the default RSA and DSA.
Enter the desired key size. Your key must be at least 4096 bits.
Enter the length of time the key should be valid. Press Enter to specify the default selection, indicating that the key doesn't expire.
Verify that your selections are correct.
Enter your user ID information.
Note: When asked to enter your email address, ensure that you enter the verified email address for your GitHub account. To keep your email address private, use your GitHub-provided no-reply email address. For more information, see "Verifying your email address" and "Setting your commit email address."
Type a secure passphrase.

2、Use the gpg --list-secret-keys --keyid-format LONG command to list GPG keys for which you have both a public and private key. A private key is required for signing commits or tags.
$ gpg --list-secret-keys --keyid-format LONG
Note: Some GPG installations on Linux may require you to use gpg2 --list-keys --keyid-format LONG to view a list of your existing keys instead. In this case you will also need to configure Git to use gpg2 by running git config --global gpg.program gpg2.
From the list of GPG keys, copy the GPG key ID you'd like to use. In this example, the GPG key ID is 3AA5C34371567BD2:

$ gpg --list-secret-keys --keyid-format LONG
/Users/hubot/.gnupg/secring.gpg
------------------------------------
sec   4096R/3AA5C34371567BD2 2016-03-10 [expires: 2017-03-10]
uid                          Hubot 
ssb   4096R/42B317FD4BA89E7A 2016-03-10
Paste the text below, substituting in the GPG key ID you'd like to use. In this example, the GPG key ID is 3AA5C34371567BD2:

$ gpg --armor --export A6E198E9C081F8FC
# Prints the GPG key ID, in ASCII armor format
Copy your GPG key, beginning with -----BEGIN PGP PUBLIC KEY BLOCK----- and ending with -----END PGP PUBLIC KEY BLOCK-----.
Add the GPG key to your GitHub account.


#viscode 安装git 配置开发环境，并连接gitee.com或者github.com 管理 code repository
#其中git产品和命令行的理解学习 建议参考廖雪峰的git 教程 https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000，尤其是 仓库、分支、工作区、暂存区、标签的理解，理解仓库对版本库的管理思路
#配置vscode的开发环境 参看vscode文档里对应的语言，其中 vscode配置 分为用户配置 和 工作区配置，在工作区内工作区配置覆盖用户配置，主要由.vscode\ 下的launch.json与settings.json设定
#关于vscode集成git 后连接同步github.com和gitee.com，参考github https://help.github.com/en/github/using-git 上文主要介绍 SSH and GPG keys 的生成和配置 以便完成连接的部分authentication  

#以下为git 常用配置
git init 初始化项目
git add . 那么这个命令的意思是我们需要先将，当前目录的文件存放到暂存区
git status 查看在暂存区域内的文件
git commit -m "首次提交" 将文件代码提交到本地的仓库中

git config  --global user.name "badacook"     #Git是分布式版本控制系统，配置用户名和邮箱 
git config  --global user.email "badacookwu@gmail.com" #Git是分布式版本控制系统，配置用户名和邮箱

git remote add origin https://gitee.com/badacook/Test.git
git remote add origin https://github.com/badacook/Test.git  添加远程版本库

git pull origin master --allow-unrelated-histories  同步远程版本库运行没有记录的同步
git commit -m "first commit" //提交更改
git status                  //查看一下状态：
git checkout master         //切换分支到master
git push -u origin master  //提交到你的仓库

git remote remove origin  //移除远程 仓库源的配置
git remote set-url        //设置远程 仓库源的配置
git config --global credential.helper wincred // Caching your GitHub password in Git
git remote rm origin //删除远端仓库分支

git config -l  //查看git配置 

rm -rf .git   //删除本地仓库配置

#接下来在使用 本地仓库 与远端仓库的同步时，可能会遇到冲突，主要同步步骤，先提交缓存区更改，清空缓存区，再同步，注意同步的分支结构,详情参阅廖雪峰的git教程
#前提是 vscode 与 github.com的仓库连接正常

#vscode 配置的同步  设置文件、快捷键设置文件、Launch File、Snippets Folder、VSCode 扩展设置、工作空间
#Setting Sync 可同步包含的所有扩展和完整的用户文件夹 上传： Shift + Alt + U (Sync: Update / Upload Settings) 下载： Shift + Alt + D (Sync: Download Settings)
1. 安装 同步插件"Settings Sync"
2. 进入github -> Settings 在左侧 Developer settings -> Personal access tokens
3. 点击按钮 Generate new token 新增一个token
4、选择要同步的本地配置
5、回到VSCode配置将token配置到本地


























